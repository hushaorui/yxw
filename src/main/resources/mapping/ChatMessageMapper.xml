<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org/DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hsr.yxw.mapper.ChatMessageMapper">
    <update id="createTable">
        create table chat_message(
           id BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1)primary key,
           senderId bigint not null,
           senderName varchar(255) not null,
           sendTime bigint not null,
           messageType varchar(255) not null,
           content varchar(255) not null
        )
    </update>

    <delete id="dropTable">
        drop table chat_message
    </delete>

    <sql id="chatMessageSql">
        <if test="publicChatMessage!=null">
            <if test="publicChatMessage.senderId!=null">and senderId = #{publicChatMessage.senderId} </if>
            <if test="publicChatMessage.senderName!=null and publicChatMessage.senderName!=''">and senderName = #{publicChatMessage.senderName} </if>
            <if test="publicChatMessage.messageType!=null">and messageType = #{publicChatMessage.messageType} </if>
            <if test="publicChatMessage.content!=null and publicChatMessage.content!=''">and content like '%' || #{publicChatMessage.content} || '%' </if>
        </if>
        <if test="sendTimeStart!=null">
            and sendTime <![CDATA[ >= ]]> #{sendTimeStart}
        </if>
        <if test="sendTimeEnd!=null">
            and sendTime <![CDATA[ <= ]]> #{sendTimeEnd}
        </if>
    </sql>

    <delete id="deleteAll">
        delete from chat_message
    </delete>
    <delete id="delete">
        delete from chat_message where id in
        <foreach item='item' index='index' collection='ids' open='(' separator=',' close=')'>
            #{item}
        </foreach>
    </delete>
    <delete id="deleteById">
        delete from chat_message where id = #{value}
    </delete>

    <select id="count" resultType="Integer" parameterType="com.hsr.yxw.ws.chat.common.PublicChatMessageQueryVo">
        select count(1) from chat_message
        <where>
            <include refid="chatMessageSql" />
        </where>
    </select>
    <select id="selectAll" resultType="com.hsr.yxw.ws.chat.pojo.PublicChatMessage">
        select * from chat_message
    </select>
    <select id="selectById" parameterType="long" resultType="com.hsr.yxw.ws.chat.pojo.PublicChatMessage">
        select * from chat_message where id = #{value}
    </select>
    <select id="selectByVo" parameterType="com.hsr.yxw.ws.chat.common.PublicChatMessageQueryVo" resultType="com.hsr.yxw.ws.chat.pojo.PublicChatMessage">
        select id, senderId, senderName, sendTime, messageType
        from chat_message
        <where>
            <include refid="chatMessageSql" />
        </where>
        order by id asc
        <if test="firstResult!=null and maxResult!=null">
            OFFSET #{firstResult} ROWS FETCH NEXT #{maxResult} ROWS ONLY
        </if>
    </select>
    <select id="selectByVoWithContent" parameterType="com.hsr.yxw.ws.chat.common.PublicChatMessageQueryVo" resultType="com.hsr.yxw.ws.chat.pojo.PublicChatMessage">
        select id, senderId, senderName, sendTime, messageType, content
        from chat_message
        <where>
            <include refid="chatMessageSql" />
        </where>
        order by id asc
        <if test="firstResult!=null and maxResult!=null">
            OFFSET #{firstResult} ROWS FETCH NEXT #{maxResult} ROWS ONLY
        </if>
    </select>
    <insert id="insert" parameterType="com.hsr.yxw.ws.chat.pojo.PublicChatMessage" useGeneratedKeys="true" keyProperty="id">
        insert into chat_message(senderId,senderName,sendTime,messageType,content)
        values(#{senderId}, #{senderName}, #{sendTime}, #{messageType},#{content})
    </insert>
    <select id="selectContentById" parameterType="long" resultType="String">
        select content from chat_message where id = #{value}
    </select>
    <!-- update 更新方法无 -->
</mapper>